{"ast":null,"code":"var _jsxFileName = \"/home/luigr/repositories/recipes-app/src/pages/FoodByIdInProgress.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport copy from 'clipboard-copy';\nimport '../styles/recommended.css';\nimport setInProgressRecipesLocalStorage from '../helpers/helpers';\n\nfunction handleFavoriteButtonClick(id, meal, favorite, setFavorite) {\n  const recipe = {\n    id,\n    type: 'comida',\n    area: meal.strArea,\n    category: meal.strCategory,\n    alcoholicOrNot: '',\n    name: meal.strMeal,\n    image: meal.strMealThumb\n  };\n\n  if (!JSON.parse(localStorage.getItem('favoriteRecipes')) || JSON.parse(localStorage.getItem('favoriteRecipes')) === 0) {\n    localStorage.setItem('favoriteRecipes', JSON.stringify([recipe]));\n  } else {\n    const favoriteFoods = JSON.parse(localStorage.getItem('favoriteRecipes'));\n    const alreadyFavorite = favoriteFoods.some(favoriteRecipe => favoriteRecipe.id === meal.idMeal);\n\n    if (alreadyFavorite) {\n      const newFavorites = favoriteFoods.filter(favoriteRecipe => favoriteRecipe.id !== meal.idMeal);\n      localStorage.setItem('favoriteRecipes', JSON.stringify(newFavorites));\n    } else {\n      favoriteFoods.push(recipe);\n      localStorage.setItem('favoriteRecipes', JSON.stringify(favoriteFoods));\n    }\n  }\n\n  if (favorite === true) {\n    return setFavorite(false);\n  }\n\n  setFavorite(true);\n}\n\nfunction validateButton(setIsDisable) {\n  const checkboxInputs = Array.from(document.querySelectorAll('.ingredient-step'));\n  const check = checkboxInputs.every(input => input.checked === true);\n  setIsDisable(!check);\n}\n\nfunction saveProcess(ingredientId, recipeId) {\n  const inProgressRecipes = JSON.parse(localStorage.getItem('inProgressRecipes'));\n\n  if (!inProgressRecipes) {\n    // localStorage vazio - funciona\n    const newProgressRecipes = {\n      meals: {\n        [recipeId]: [ingredientId]\n      }\n    };\n    setInProgressRecipesLocalStorage(newProgressRecipes);\n  } else if (!inProgressRecipes.meals) {\n    // localStorage apenas com bebidas -\n    const newProgressRecipes = { ...inProgressRecipes,\n      meals: {\n        [recipeId]: [ingredientId]\n      }\n    };\n    setInProgressRecipesLocalStorage(newProgressRecipes);\n  } else if (!inProgressRecipes.meals[recipeId]) {\n    // localStorage sem essa receita - funciona\n    const newProgressRecipes = { ...inProgressRecipes,\n      meals: { ...inProgressRecipes.meals,\n        [recipeId]: [ingredientId]\n      }\n    };\n    setInProgressRecipesLocalStorage(newProgressRecipes);\n  } else {\n    // o id já está salvo\n    const recipeIngredients = inProgressRecipes.meals[recipeId];\n    const isIngredientDone = recipeIngredients.some(ingredientNumber => parseInt(ingredientNumber, 10) === ingredientId);\n\n    if (isIngredientDone) {\n      // ingrediente já está salvo\n      const arrayIds = recipeIngredients.filter(ingredientNumber => parseInt(ingredientNumber, 10) !== ingredientId);\n      const newProgressRecipes = { ...inProgressRecipes,\n        meals: { ...inProgressRecipes.meals,\n          [recipeId]: [...arrayIds]\n        }\n      };\n      setInProgressRecipesLocalStorage(newProgressRecipes);\n    } else {\n      // ingrediente não está salvo\n      const arrayIds = [...recipeIngredients, ingredientId];\n      const newProgressRecipes = { ...inProgressRecipes,\n        meals: { ...inProgressRecipes.meals,\n          [recipeId]: [...arrayIds]\n        }\n      };\n      setInProgressRecipesLocalStorage(newProgressRecipes);\n    }\n  }\n}\n\nfunction checkIngredient(_ref, setIsDisable, index, id) {\n  let {\n    target\n  } = _ref;\n\n  if (target.checked) {\n    target.parentNode.style = 'text-decoration: line-through';\n  } else {\n    target.parentNode.style = 'text-decoration: none';\n  }\n\n  validateButton(setIsDisable);\n  saveProcess(index, id);\n}\n\nfunction getFavorites(callbackIngredients, callbackFavorite, id) {\n  const favoriteRecipes = JSON.parse(localStorage.getItem('favoriteRecipes'));\n\n  if (favoriteRecipes !== null && favoriteRecipes.some(recipe => recipe.id === id)) {\n    callbackFavorite(true);\n  }\n\n  const inProgressRecipes = JSON.parse(localStorage.getItem('inProgressRecipes'));\n  const savedIngredients = inProgressRecipes ? inProgressRecipes.meals[id] : [];\n\n  if (savedIngredients) {\n    callbackIngredients(savedIngredients);\n  }\n}\n\nexport default function FoodByIdInProgress(_ref2) {\n  let {\n    match\n  } = _ref2;\n  const {\n    foodId: id\n  } = match.params;\n  const [meal, setMeal] = useState({});\n  const [alert, setAlert] = useState(false);\n  const [favorite, setFavorite] = useState(false);\n  const [isDisable, setIsDisable] = useState(true);\n  const [ingredientsSaved, setIngredientsSaved] = useState([]);\n  const history = useHistory();\n  useEffect(() => {\n    getFavorites(setIngredientsSaved, setFavorite, id);\n  }, [id]);\n  const ingredients = Object.keys(meal).filter(ingredient => ingredient.includes('strIngredient')).map(ingredient => meal[ingredient]);\n  const measures = Object.keys(meal).filter(measure => measure.includes('strMeasure')).map(measure => meal[measure]);\n  useEffect(() => {\n    const fetchById = async () => {\n      try {\n        const res = await fetch(`https://www.themealdb.com/api/json/v1/1/lookup.php?i=${id}`);\n        const json = await res.json();\n        const mealRecipe = json.meals[0];\n        setMeal(mealRecipe);\n        return mealRecipe;\n      } catch (error) {\n        console.log('error', error);\n      }\n    };\n\n    fetchById();\n  }, [id]);\n\n  function displayAlert() {\n    const THREE = 3000;\n    setTimeout(() => setAlert(false), THREE);\n    return /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 18\n      }\n    }, \"Link copiado!\"));\n  }\n\n  const styles = {\n    checked: {\n      textDecoration: 'line-through'\n    },\n    unchecked: {\n      textDecoration: ''\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"page-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"recipe-category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }, meal.strCategory), /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"recipe-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }, meal.strMeal), /*#__PURE__*/React.createElement(\"img\", {\n    \"data-testid\": \"recipe-photo\",\n    alt: meal.strMeal,\n    src: meal.strMealThumb,\n    width: \"200\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ingredient-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }\n  }, ingredients.map((ingredient, i) => ingredient === '' || ingredient === null ? null : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ingredient-container\",\n    key: `${ingredient}-${i}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    \"data-testid\": `${i}-ingredient-step`,\n    htmlFor: ingredient,\n    style: ingredientsSaved.some(ingredientId => parseInt(ingredientId, 10) === i) ? styles.checked : styles.unchecked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onClick: event => checkIngredient(event, setIsDisable, i, id),\n    id: ingredient,\n    type: \"checkbox\",\n    className: \"ingredient-step\",\n    defaultChecked: ingredientsSaved.some(ingredientId => parseInt(ingredientId, 10) === i),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 21\n    }\n  }), measures[i] === '' || !measures[i] ? ingredient : `${ingredient} - ${measures[i]}`)))), /*#__PURE__*/React.createElement(\"div\", {\n    \"data-testid\": \"instructions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }\n  }, meal.strInstructions), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"image\",\n    onClick: () => {\n      copy(`http://localhost:3000/comidas/${id}`);\n      setAlert(true);\n    },\n    alt: \"share-content\",\n    \"data-testid\": \"share-btn\",\n    src: \"/images/shareIcon.svg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }\n  }), alert && displayAlert(), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"image\",\n    \"data-testid\": \"favorite-btn\",\n    onClick: () => handleFavoriteButtonClick(id, meal, favorite, setFavorite),\n    alt: \"heart\",\n    src: favorite ? '/images/blackHeartIcon.svg' : '/images/whiteHeartIcon.svg',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    \"data-testid\": \"finish-recipe-btn\",\n    disabled: isDisable,\n    onClick: () => history.push('/receitas-feitas'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }\n  }, \"Finalizar Receita\")));\n}\nFoodByIdInProgress.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      foodId: PropTypes.string\n    })\n  }).isRequired\n};","map":{"version":3,"sources":["/home/luigr/repositories/recipes-app/src/pages/FoodByIdInProgress.jsx"],"names":["React","useEffect","useState","useHistory","PropTypes","copy","setInProgressRecipesLocalStorage","handleFavoriteButtonClick","id","meal","favorite","setFavorite","recipe","type","area","strArea","category","strCategory","alcoholicOrNot","name","strMeal","image","strMealThumb","JSON","parse","localStorage","getItem","setItem","stringify","favoriteFoods","alreadyFavorite","some","favoriteRecipe","idMeal","newFavorites","filter","push","validateButton","setIsDisable","checkboxInputs","Array","from","document","querySelectorAll","check","every","input","checked","saveProcess","ingredientId","recipeId","inProgressRecipes","newProgressRecipes","meals","recipeIngredients","isIngredientDone","ingredientNumber","parseInt","arrayIds","checkIngredient","index","target","parentNode","style","getFavorites","callbackIngredients","callbackFavorite","favoriteRecipes","savedIngredients","FoodByIdInProgress","match","foodId","params","setMeal","alert","setAlert","isDisable","ingredientsSaved","setIngredientsSaved","history","ingredients","Object","keys","ingredient","includes","map","measures","measure","fetchById","res","fetch","json","mealRecipe","error","console","log","displayAlert","THREE","setTimeout","styles","textDecoration","unchecked","i","event","strInstructions","propTypes","shape","string","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAO,2BAAP;AACA,OAAOC,gCAAP,MAA6C,oBAA7C;;AAEA,SAASC,yBAAT,CAAmCC,EAAnC,EAAuCC,IAAvC,EAA6CC,QAA7C,EAAuDC,WAAvD,EAAoE;AAClE,QAAMC,MAAM,GAAG;AACbJ,IAAAA,EADa;AAEbK,IAAAA,IAAI,EAAE,QAFO;AAGbC,IAAAA,IAAI,EAAEL,IAAI,CAACM,OAHE;AAIbC,IAAAA,QAAQ,EAAEP,IAAI,CAACQ,WAJF;AAKbC,IAAAA,cAAc,EAAE,EALH;AAMbC,IAAAA,IAAI,EAAEV,IAAI,CAACW,OANE;AAObC,IAAAA,KAAK,EAAEZ,IAAI,CAACa;AAPC,GAAf;;AASA,MAAI,CAACC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CAAD,IACCH,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,MAAwD,CAD7D,EACgE;AAC9DD,IAAAA,YAAY,CAACE,OAAb,CAAqB,iBAArB,EAAwCJ,IAAI,CAACK,SAAL,CAAe,CAAChB,MAAD,CAAf,CAAxC;AACD,GAHD,MAGO;AACL,UAAMiB,aAAa,GAAGN,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CAAtB;AACA,UAAMI,eAAe,GAAGD,aAAa,CAACE,IAAd,CACrBC,cAAD,IAAoBA,cAAc,CAACxB,EAAf,KAAsBC,IAAI,CAACwB,MADzB,CAAxB;;AAGA,QAAIH,eAAJ,EAAqB;AACnB,YAAMI,YAAY,GAAGL,aAAa,CAACM,MAAd,CAClBH,cAAD,IAAoBA,cAAc,CAACxB,EAAf,KAAsBC,IAAI,CAACwB,MAD5B,CAArB;AAGAR,MAAAA,YAAY,CAACE,OAAb,CAAqB,iBAArB,EAAwCJ,IAAI,CAACK,SAAL,CAAeM,YAAf,CAAxC;AACD,KALD,MAKO;AACLL,MAAAA,aAAa,CAACO,IAAd,CAAmBxB,MAAnB;AACAa,MAAAA,YAAY,CAACE,OAAb,CAAqB,iBAArB,EAAwCJ,IAAI,CAACK,SAAL,CAAeC,aAAf,CAAxC;AACD;AACF;;AACD,MAAInB,QAAQ,KAAK,IAAjB,EAAuB;AACrB,WAAOC,WAAW,CAAC,KAAD,CAAlB;AACD;;AACDA,EAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AAED,SAAS0B,cAAT,CAAwBC,YAAxB,EAAsC;AACpC,QAAMC,cAAc,GAAGC,KAAK,CAACC,IAAN,CAAWC,QAAQ,CAACC,gBAAT,CAA0B,kBAA1B,CAAX,CAAvB;AACA,QAAMC,KAAK,GAAGL,cAAc,CAACM,KAAf,CAAsBC,KAAD,IAAWA,KAAK,CAACC,OAAN,KAAkB,IAAlD,CAAd;AACAT,EAAAA,YAAY,CAAC,CAACM,KAAF,CAAZ;AACD;;AAED,SAASI,WAAT,CAAqBC,YAArB,EAAmCC,QAAnC,EAA6C;AAC3C,QAAMC,iBAAiB,GAAG5B,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,mBAArB,CAAX,CAA1B;;AACA,MAAI,CAACyB,iBAAL,EAAwB;AAAE;AACxB,UAAMC,kBAAkB,GAAG;AACzBC,MAAAA,KAAK,EAAE;AAAE,SAACH,QAAD,GAAY,CAACD,YAAD;AAAd;AADkB,KAA3B;AAGA3C,IAAAA,gCAAgC,CAAC8C,kBAAD,CAAhC;AACD,GALD,MAKO,IAAI,CAACD,iBAAiB,CAACE,KAAvB,EAA8B;AAAE;AACrC,UAAMD,kBAAkB,GAAG,EACzB,GAAGD,iBADsB;AAEzBE,MAAAA,KAAK,EAAE;AAAE,SAACH,QAAD,GAAY,CAACD,YAAD;AAAd;AAFkB,KAA3B;AAIA3C,IAAAA,gCAAgC,CAAC8C,kBAAD,CAAhC;AACD,GANM,MAMA,IAAI,CAACD,iBAAiB,CAACE,KAAlB,CAAwBH,QAAxB,CAAL,EAAwC;AAAE;AAC/C,UAAME,kBAAkB,GAAG,EACzB,GAAGD,iBADsB;AAEzBE,MAAAA,KAAK,EAAE,EACL,GAAGF,iBAAiB,CAACE,KADhB;AAEL,SAACH,QAAD,GAAY,CAACD,YAAD;AAFP;AAFkB,KAA3B;AAOA3C,IAAAA,gCAAgC,CAAC8C,kBAAD,CAAhC;AACD,GATM,MASA;AAAE;AACP,UAAME,iBAAiB,GAAGH,iBAAiB,CAACE,KAAlB,CAAwBH,QAAxB,CAA1B;AACA,UAAMK,gBAAgB,GAAGD,iBAAiB,CACvCvB,IADsB,CAChByB,gBAAD,IAAsBC,QAAQ,CAACD,gBAAD,EAAmB,EAAnB,CAAR,KAAmCP,YADxC,CAAzB;;AAEA,QAAIM,gBAAJ,EAAsB;AAAE;AACtB,YAAMG,QAAQ,GAAGJ,iBAAiB,CAC/BnB,MADc,CACNqB,gBAAD,IAAsBC,QAAQ,CAACD,gBAAD,EAAmB,EAAnB,CAAR,KAAmCP,YADlD,CAAjB;AAEA,YAAMG,kBAAkB,GAAG,EACzB,GAAGD,iBADsB;AAEzBE,QAAAA,KAAK,EAAE,EAAE,GAAGF,iBAAiB,CAACE,KAAvB;AAA8B,WAACH,QAAD,GAAY,CAAC,GAAGQ,QAAJ;AAA1C;AAFkB,OAA3B;AAIApD,MAAAA,gCAAgC,CAAC8C,kBAAD,CAAhC;AACD,KARD,MAQO;AAAE;AACP,YAAMM,QAAQ,GAAG,CAAC,GAAGJ,iBAAJ,EAAuBL,YAAvB,CAAjB;AACA,YAAMG,kBAAkB,GAAG,EACzB,GAAGD,iBADsB;AAEzBE,QAAAA,KAAK,EAAE,EACL,GAAGF,iBAAiB,CAACE,KADhB;AAEL,WAACH,QAAD,GAAY,CAAC,GAAGQ,QAAJ;AAFP;AAFkB,OAA3B;AAOApD,MAAAA,gCAAgC,CAAC8C,kBAAD,CAAhC;AACD;AACF;AACF;;AAED,SAASO,eAAT,OAAqCrB,YAArC,EAAmDsB,KAAnD,EAA0DpD,EAA1D,EAA8D;AAAA,MAArC;AAAEqD,IAAAA;AAAF,GAAqC;;AAC5D,MAAIA,MAAM,CAACd,OAAX,EAAoB;AAClBc,IAAAA,MAAM,CAACC,UAAP,CAAkBC,KAAlB,GAA0B,+BAA1B;AACD,GAFD,MAEO;AACLF,IAAAA,MAAM,CAACC,UAAP,CAAkBC,KAAlB,GAA0B,uBAA1B;AACD;;AACD1B,EAAAA,cAAc,CAACC,YAAD,CAAd;AACAU,EAAAA,WAAW,CAACY,KAAD,EAAQpD,EAAR,CAAX;AACD;;AAED,SAASwD,YAAT,CAAsBC,mBAAtB,EAA2CC,gBAA3C,EAA6D1D,EAA7D,EAAiE;AAC/D,QAAM2D,eAAe,GAAG5C,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CAAxB;;AACA,MAAIyC,eAAe,KAAK,IAApB,IAA4BA,eAAe,CAACpC,IAAhB,CAAsBnB,MAAD,IAAYA,MAAM,CAACJ,EAAP,KAAcA,EAA/C,CAAhC,EAAoF;AAClF0D,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD;;AACD,QAAMf,iBAAiB,GAAG5B,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,mBAArB,CAAX,CAA1B;AACA,QAAM0C,gBAAgB,GAAGjB,iBAAiB,GAAGA,iBAAiB,CAACE,KAAlB,CAAwB7C,EAAxB,CAAH,GAAiC,EAA3E;;AACA,MAAI4D,gBAAJ,EAAsB;AACpBH,IAAAA,mBAAmB,CAACG,gBAAD,CAAnB;AACD;AACF;;AAED,eAAe,SAASC,kBAAT,QAAuC;AAAA,MAAX;AAAEC,IAAAA;AAAF,GAAW;AACpD,QAAM;AAAEC,IAAAA,MAAM,EAAE/D;AAAV,MAAiB8D,KAAK,CAACE,MAA7B;AACA,QAAM,CAAC/D,IAAD,EAAOgE,OAAP,IAAkBvE,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACwE,KAAD,EAAQC,QAAR,IAAoBzE,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAAC0E,SAAD,EAAYtC,YAAZ,IAA4BpC,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAAC2E,gBAAD,EACJC,mBADI,IACmB5E,QAAQ,CAAC,EAAD,CADjC;AAEA,QAAM6E,OAAO,GAAG5E,UAAU,EAA1B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd+D,IAAAA,YAAY,CAACc,mBAAD,EAAsBnE,WAAtB,EAAmCH,EAAnC,CAAZ;AACD,GAFQ,EAEN,CAACA,EAAD,CAFM,CAAT;AAIA,QAAMwE,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYzE,IAAZ,EACjB0B,MADiB,CACTgD,UAAD,IAAgBA,UAAU,CAACC,QAAX,CAAoB,eAApB,CADN,EAEjBC,GAFiB,CAEZF,UAAD,IAAgB1E,IAAI,CAAC0E,UAAD,CAFP,CAApB;AAIA,QAAMG,QAAQ,GAAGL,MAAM,CAACC,IAAP,CAAYzE,IAAZ,EACd0B,MADc,CACNoD,OAAD,IAAaA,OAAO,CAACH,QAAR,CAAiB,YAAjB,CADN,EAEdC,GAFc,CAETE,OAAD,IAAa9E,IAAI,CAAC8E,OAAD,CAFP,CAAjB;AAIAtF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMuF,SAAS,GAAG,YAAY;AAC5B,UAAI;AACF,cAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,wDAAuDlF,EAAG,EAA5D,CAAvB;AACA,cAAMmF,IAAI,GAAG,MAAMF,GAAG,CAACE,IAAJ,EAAnB;AACA,cAAMC,UAAU,GAAGD,IAAI,CAACtC,KAAL,CAAW,CAAX,CAAnB;AACAoB,QAAAA,OAAO,CAACmB,UAAD,CAAP;AACA,eAAOA,UAAP;AACD,OAND,CAME,OAAOC,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACD;AACF,KAVD;;AAWAL,IAAAA,SAAS;AACV,GAbQ,EAaN,CAAChF,EAAD,CAbM,CAAT;;AAeA,WAASwF,YAAT,GAAwB;AACtB,UAAMC,KAAK,GAAG,IAAd;AACAC,IAAAA,UAAU,CAAC,MAAMvB,QAAQ,CAAC,KAAD,CAAf,EAAwBsB,KAAxB,CAAV;AACA,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAN,CAAP;AACD;;AAED,QAAME,MAAM,GAAG;AACbpD,IAAAA,OAAO,EAAE;AAAEqD,MAAAA,cAAc,EAAE;AAAlB,KADI;AAEbC,IAAAA,SAAS,EAAE;AAAED,MAAAA,cAAc,EAAE;AAAlB;AAFE,GAAf;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,mBAAY,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmC3F,IAAI,CAACQ,WAAxC,CADF,eAEE;AAAI,mBAAY,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgCR,IAAI,CAACW,OAArC,CAFF,eAGE;AACE,mBAAY,cADd;AAEE,IAAA,GAAG,EAAGX,IAAI,CAACW,OAFb;AAGE,IAAA,GAAG,EAAGX,IAAI,CAACa,YAHb;AAIE,IAAA,KAAK,EAAC,KAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,eASE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG0D,WAAW,CAACK,GAAZ,CAAgB,CAACF,UAAD,EAAamB,CAAb,KACdnB,UAAU,KAAK,EAAf,IAAqBA,UAAU,KAAK,IAArC,GACI,IADJ,gBAGI;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAsC,IAAA,GAAG,EAAI,GAAEA,UAAW,IAAGmB,CAAE,EAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,mBAAe,GAAEA,CAAE,kBADrB;AAEE,IAAA,OAAO,EAAGnB,UAFZ;AAGE,IAAA,KAAK,EAAGN,gBAAgB,CACrB9C,IADK,CACCkB,YAAD,IAAkBQ,QAAQ,CAACR,YAAD,EAAe,EAAf,CAAR,KAA+BqD,CADjD,IAEJH,MAAM,CAACpD,OAFH,GAEaoD,MAAM,CAACE,SAL9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE;AACE,IAAA,OAAO,EAAIE,KAAD,IAAW5C,eAAe,CAAC4C,KAAD,EAAQjE,YAAR,EAAsBgE,CAAtB,EAAyB9F,EAAzB,CADtC;AAEE,IAAA,EAAE,EAAG2E,UAFP;AAGE,IAAA,IAAI,EAAC,UAHP;AAIE,IAAA,SAAS,EAAC,iBAJZ;AAKE,IAAA,cAAc,EAAGN,gBAAgB,CAC9B9C,IADc,CACRkB,YAAD,IAAkBQ,QAAQ,CAACR,YAAD,EAAe,EAAf,CAAR,KAA+BqD,CADxC,CALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,EAgBKhB,QAAQ,CAACgB,CAAD,CAAR,KAAgB,EAAhB,IAAsB,CAAChB,QAAQ,CAACgB,CAAD,CAAhC,GACInB,UADJ,GAEK,GAAEA,UAAW,MAAKG,QAAQ,CAACgB,CAAD,CAAI,EAlBvC,CADF,CAJL,CADH,CATF,eAuCE;AAAK,mBAAY,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiC7F,IAAI,CAAC+F,eAAtC,CAvCF,eAwCE;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,OAAO,EAAG,MAAM;AACdnG,MAAAA,IAAI,CAAE,iCAAgCG,EAAG,EAArC,CAAJ;AACAmE,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KALH;AAME,IAAA,GAAG,EAAC,eANN;AAOE,mBAAY,WAPd;AAQE,IAAA,GAAG,EAAC,uBARN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxCF,EAkDGD,KAAK,IAAIsB,YAAY,EAlDxB,eAmDE;AACE,IAAA,IAAI,EAAC,OADP;AAEE,mBAAY,cAFd;AAGE,IAAA,OAAO,EAAG,MAAMzF,yBAAyB,CAACC,EAAD,EAAKC,IAAL,EAAWC,QAAX,EAAqBC,WAArB,CAH3C;AAIE,IAAA,GAAG,EAAC,OAJN;AAKE,IAAA,GAAG,EACDD,QAAQ,GAAG,4BAAH,GAAkC,4BAN9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnDF,eA4DE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,mBAAY,mBAFd;AAGE,IAAA,QAAQ,EAAGkE,SAHb;AAIE,IAAA,OAAO,EAAG,MAAMG,OAAO,CAAC3C,IAAR,CAAa,kBAAb,CAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBA5DF,CADF,CADF;AAyED;AAEDiC,kBAAkB,CAACoC,SAAnB,GAA+B;AAC7BnC,EAAAA,KAAK,EAAElE,SAAS,CAACsG,KAAV,CAAgB;AACrBlC,IAAAA,MAAM,EAAEpE,SAAS,CAACsG,KAAV,CAAgB;AACtBnC,MAAAA,MAAM,EAAEnE,SAAS,CAACuG;AADI,KAAhB;AADa,GAAhB,EAIJC;AAL0B,CAA/B","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport copy from 'clipboard-copy';\nimport '../styles/recommended.css';\nimport setInProgressRecipesLocalStorage from '../helpers/helpers';\n\nfunction handleFavoriteButtonClick(id, meal, favorite, setFavorite) {\n  const recipe = {\n    id,\n    type: 'comida',\n    area: meal.strArea,\n    category: meal.strCategory,\n    alcoholicOrNot: '',\n    name: meal.strMeal,\n    image: meal.strMealThumb };\n\n  if (!JSON.parse(localStorage.getItem('favoriteRecipes'))\n    || JSON.parse(localStorage.getItem('favoriteRecipes')) === 0) {\n    localStorage.setItem('favoriteRecipes', JSON.stringify([recipe]));\n  } else {\n    const favoriteFoods = JSON.parse(localStorage.getItem('favoriteRecipes'));\n    const alreadyFavorite = favoriteFoods.some(\n      (favoriteRecipe) => favoriteRecipe.id === meal.idMeal,\n    );\n    if (alreadyFavorite) {\n      const newFavorites = favoriteFoods.filter(\n        (favoriteRecipe) => favoriteRecipe.id !== meal.idMeal,\n      );\n      localStorage.setItem('favoriteRecipes', JSON.stringify(newFavorites));\n    } else {\n      favoriteFoods.push(recipe);\n      localStorage.setItem('favoriteRecipes', JSON.stringify(favoriteFoods));\n    }\n  }\n  if (favorite === true) {\n    return setFavorite(false);\n  }\n  setFavorite(true);\n}\n\nfunction validateButton(setIsDisable) {\n  const checkboxInputs = Array.from(document.querySelectorAll('.ingredient-step'));\n  const check = checkboxInputs.every((input) => input.checked === true);\n  setIsDisable(!check);\n}\n\nfunction saveProcess(ingredientId, recipeId) {\n  const inProgressRecipes = JSON.parse(localStorage.getItem('inProgressRecipes'));\n  if (!inProgressRecipes) { // localStorage vazio - funciona\n    const newProgressRecipes = {\n      meals: { [recipeId]: [ingredientId] },\n    };\n    setInProgressRecipesLocalStorage(newProgressRecipes);\n  } else if (!inProgressRecipes.meals) { // localStorage apenas com bebidas -\n    const newProgressRecipes = {\n      ...inProgressRecipes,\n      meals: { [recipeId]: [ingredientId] },\n    };\n    setInProgressRecipesLocalStorage(newProgressRecipes);\n  } else if (!inProgressRecipes.meals[recipeId]) { // localStorage sem essa receita - funciona\n    const newProgressRecipes = {\n      ...inProgressRecipes,\n      meals: {\n        ...inProgressRecipes.meals,\n        [recipeId]: [ingredientId],\n      },\n    };\n    setInProgressRecipesLocalStorage(newProgressRecipes);\n  } else { // o id já está salvo\n    const recipeIngredients = inProgressRecipes.meals[recipeId];\n    const isIngredientDone = recipeIngredients\n      .some((ingredientNumber) => parseInt(ingredientNumber, 10) === ingredientId);\n    if (isIngredientDone) { // ingrediente já está salvo\n      const arrayIds = recipeIngredients\n        .filter((ingredientNumber) => parseInt(ingredientNumber, 10) !== ingredientId);\n      const newProgressRecipes = {\n        ...inProgressRecipes,\n        meals: { ...inProgressRecipes.meals, [recipeId]: [...arrayIds] },\n      };\n      setInProgressRecipesLocalStorage(newProgressRecipes);\n    } else { // ingrediente não está salvo\n      const arrayIds = [...recipeIngredients, ingredientId];\n      const newProgressRecipes = {\n        ...inProgressRecipes,\n        meals: {\n          ...inProgressRecipes.meals,\n          [recipeId]: [...arrayIds],\n        },\n      };\n      setInProgressRecipesLocalStorage(newProgressRecipes);\n    }\n  }\n}\n\nfunction checkIngredient({ target }, setIsDisable, index, id) {\n  if (target.checked) {\n    target.parentNode.style = 'text-decoration: line-through';\n  } else {\n    target.parentNode.style = 'text-decoration: none';\n  }\n  validateButton(setIsDisable);\n  saveProcess(index, id);\n}\n\nfunction getFavorites(callbackIngredients, callbackFavorite, id) {\n  const favoriteRecipes = JSON.parse(localStorage.getItem('favoriteRecipes'));\n  if (favoriteRecipes !== null && favoriteRecipes.some((recipe) => recipe.id === id)) {\n    callbackFavorite(true);\n  }\n  const inProgressRecipes = JSON.parse(localStorage.getItem('inProgressRecipes'));\n  const savedIngredients = inProgressRecipes ? inProgressRecipes.meals[id] : [];\n  if (savedIngredients) {\n    callbackIngredients(savedIngredients);\n  }\n}\n\nexport default function FoodByIdInProgress({ match }) {\n  const { foodId: id } = match.params;\n  const [meal, setMeal] = useState({});\n  const [alert, setAlert] = useState(false);\n  const [favorite, setFavorite] = useState(false);\n  const [isDisable, setIsDisable] = useState(true);\n  const [ingredientsSaved,\n    setIngredientsSaved] = useState([]);\n  const history = useHistory();\n\n  useEffect(() => {\n    getFavorites(setIngredientsSaved, setFavorite, id);\n  }, [id]);\n\n  const ingredients = Object.keys(meal)\n    .filter((ingredient) => ingredient.includes('strIngredient'))\n    .map((ingredient) => meal[ingredient]);\n\n  const measures = Object.keys(meal)\n    .filter((measure) => measure.includes('strMeasure'))\n    .map((measure) => meal[measure]);\n\n  useEffect(() => {\n    const fetchById = async () => {\n      try {\n        const res = await fetch(`https://www.themealdb.com/api/json/v1/1/lookup.php?i=${id}`);\n        const json = await res.json();\n        const mealRecipe = json.meals[0];\n        setMeal(mealRecipe);\n        return mealRecipe;\n      } catch (error) {\n        console.log('error', error);\n      }\n    };\n    fetchById();\n  }, [id]);\n\n  function displayAlert() {\n    const THREE = 3000;\n    setTimeout(() => setAlert(false), THREE);\n    return <span><i>Link copiado!</i></span>;\n  }\n\n  const styles = {\n    checked: { textDecoration: 'line-through' },\n    unchecked: { textDecoration: '' },\n  };\n\n  return (\n    <div className=\"page-container\">\n      <div>\n        <h2 data-testid=\"recipe-category\">{meal.strCategory}</h2>\n        <h2 data-testid=\"recipe-title\">{meal.strMeal}</h2>\n        <img\n          data-testid=\"recipe-photo\"\n          alt={ meal.strMeal }\n          src={ meal.strMealThumb }\n          width=\"200\"\n        />\n        <div className=\"ingredient-list\">\n          {ingredients.map((ingredient, i) => (\n            (ingredient === '' || ingredient === null)\n              ? null\n              : (\n                <div className=\"ingredient-container\" key={ `${ingredient}-${i}` }>\n                  <label\n                    data-testid={ `${i}-ingredient-step` }\n                    htmlFor={ ingredient }\n                    style={ ingredientsSaved\n                      .some((ingredientId) => parseInt(ingredientId, 10) === i)\n                      ? styles.checked : styles.unchecked }\n                  >\n                    <input\n                      onClick={ (event) => checkIngredient(event, setIsDisable, i, id) }\n                      id={ ingredient }\n                      type=\"checkbox\"\n                      className=\"ingredient-step\"\n                      defaultChecked={ ingredientsSaved\n                        .some((ingredientId) => parseInt(ingredientId, 10) === i) }\n                    />\n                    {\n                      (measures[i] === '' || !measures[i])\n                        ? ingredient\n                        : `${ingredient} - ${measures[i]}`\n                    }\n                  </label>\n                </div>\n              )))}\n        </div>\n        <div data-testid=\"instructions\">{meal.strInstructions}</div>\n        <input\n          type=\"image\"\n          onClick={ () => {\n            copy(`http://localhost:3000/comidas/${id}`);\n            setAlert(true);\n          } }\n          alt=\"share-content\"\n          data-testid=\"share-btn\"\n          src=\"/images/shareIcon.svg\"\n        />\n        {alert && displayAlert()}\n        <input\n          type=\"image\"\n          data-testid=\"favorite-btn\"\n          onClick={ () => handleFavoriteButtonClick(id, meal, favorite, setFavorite) }\n          alt=\"heart\"\n          src={\n            favorite ? '/images/blackHeartIcon.svg' : '/images/whiteHeartIcon.svg'\n          }\n        />\n        <button\n          type=\"button\"\n          data-testid=\"finish-recipe-btn\"\n          disabled={ isDisable }\n          onClick={ () => history.push('/receitas-feitas') }\n        >\n          Finalizar Receita\n        </button>\n      </div>\n    </div>\n  );\n}\n\nFoodByIdInProgress.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      foodId: PropTypes.string,\n    }),\n  }).isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}